자동 배포 기능

Code Deploy 장점
- 새로운 기능들의 빠른 배포
- 소프트웨어 & 서버 다운 타임 x
  - 만약 수동으로 배포한다면 서버를 다운시키고 새로 배포하는 과정을 거쳐야 한다.
- Manual 에러 x
  - 휴먼 에러가 발생할 여지가 매우 작음

Rolling 배포
  현재 production에서 돌아가고 있는 서버가 있고 새로운 기능이 일부 포함된 서버를 배포하려고 한다.
  이 과정이 연속된다면 점층적인 배포가 이뤄지게 된다

  ex. 
  하나의 ELB에 3개의 인스턴스 ver 0.1 이 묶여있다고 가정
  첫번째 인스턴스부터 셧다운을 시킨다. 이때 비활성화 되므로 ELB 설정도 변경이 필요하다.(첫번째 서버로
  요청이 들어가지 않도록) 새로운 배포 ver 0.2가 완성되었다면, code deploy는 첫번째 인스턴스에 설치가 되고
  셧다운된 서버가 재가동되게 할 것이고 이 과정을 세번째 서버까지 동일하게 진행한다.
  만약 이전 버전으로 롤백하고 싶다면 사실상 어렵다.
  -> 이 단점 때문에 아래 Blue/Green 배포를 선택할 수 있다.
  + Rolling 배포를 사용하는 경우
    거의 모든 측면에서 Blue/Green 배포 방식이 더욱 개선된 배포 방법임에는 분명하나,
    이전 버전과의 비교를 할 수 없는 최초 배포 때는 Rolling 배포 방식을 선택해야 한다.

Blue/Green 배포
  Blue : 현재 production, Green : 새로 배포할 production
  Blue의 traffic 양을 줄이고 Green으로 옮겨서 새로운 기능을 배포
  Blue를 완전 셧다운 시키고 Green을 100% 활성화 시키는 방법

  ex.
  하나의 ELB에 3개의 인스턴스 ver 0.1 이 묶여있다고 가정
  ver 0.2로 변경하려고 한다면 code deploy는 기존에 있던 3개의 인스턴스를 유지 시킨채,
  새로운 3개의 인스턴스 ver 0.2를 ELB에 연결한다.
  traffic 양을 Blue에서 Green으로 옮겨간다. Blue는 모두 셧다운이 된다.
  만약 이전 버전으로 돌아가고 싶다면 ELB 세팅만 변경하면 된다.
  기존 3개의 인스턴스가 셧다운 되어있다면 다시 재가동하고 traffic을 바꿔주면 된다.
  (물론 이전 버전을 삭제하지 않았다는 가정하에)

  +하나의 새로운 production 환경을 만드는 방법이라 추가적인 비용이 든다.
  (물론 Blue 환경을 완전히 제거하지 않았다는 전제 하에)
  그러나 production의 크기가 커질수록 Blue/Green 배포는 선택이 아닌 필수
